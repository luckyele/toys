MYSQL(1)                   MySQL Database System                  MYSQL(1)

NNAAMMEE
       mysql - the MySQL command-line client

SSYYNNOOPPSSIISS
       mmyyssqqll [[_o_p_t_i_o_n_s]] _d_b___n_a_m_e

DDEESSCCRRIIPPTTIIOONN
       mmyyssqqll is a simple SQL shell with input line editing capabilities.
       It supports interactive and noninteractive use. When used
       interactively, query results are presented in an ASCII-table
       format. When used noninteractively (for example, as a filter), the
       result is presented in tab-separated format. The output format can
       be changed using command options.

       If you have problems due to insufficient memory for large result
       sets, use the ----qquuiicckk option. This forces mmyyssqqll to retrieve results
       from the server a row at a time rather than retrieving the entire
       result set and buffering it in memory before displaying it. This is
       done by returning the result set using the mysql_use_result() C API
       function in the client/server library rather than
       mysql_store_result().

           NNoottee
           Alternatively, MySQL Shell offers access to the X DevAPI. For
           details, see MMyySSQQLL SShheellll 88..00 ((ppaarrtt ooff MMyySSQQLL 88..00))[1].

       Using mmyyssqqll is very easy. Invoke it from the prompt of your command
       interpreter as follows:

           shell> mmyyssqqll _d_b___n_a_m_e

       Or:

           shell> mmyyssqqll ----uusseerr==_u_s_e_r___n_a_m_e ----ppaasssswwoorrdd _d_b___n_a_m_e
           Enter password: _y_o_u_r___p_a_s_s_w_o_r_d

       Then type an SQL statement, end it with ;, \g, or \G and press
       Enter.

       Typing Control+C interrupts the current statement if there is one,
       or cancels any partial input line otherwise.

       You can execute SQL statements in a script file (batch file) like
       this:

           shell> mmyyssqqll _d_b___n_a_m_e << _s_c_r_i_p_t_._s_q_l >> _o_u_t_p_u_t_._t_a_b

       On Unix, the mmyyssqqll client logs statements executed interactively to
       a history file. See the section called “MYSQL CLIENT LOGGING”.

MMYYSSQQLL CCLLIIEENNTT OOPPTTIIOONNSS
       mmyyssqqll supports the following options, which can be specified on the
       command line or in the [mysql] and [client] groups of an option
       file. For information about option files used by MySQL programs,
       see Section 4.2.6, “Using Option Files”.

       •   ----hheellpp, --??

           Display a help message and exit.

       •   ----aauuttoo--rreehhaasshh

           Enable automatic rehashing. This option is on by default, which
           enables database, table, and column name completion. Use
           ----ddiissaabbllee--aauuttoo--rreehhaasshh to disable rehashing. That causes mmyyssqqll
           to start faster, but you must issue the rehash command or its
           \# shortcut if you want to use name completion.

           To complete a name, enter the first part and press Tab. If the
           name is unambiguous, mmyyssqqll completes it. Otherwise, you can
           press Tab again to see the possible names that begin with what
           you have typed so far. Completion does not occur if there is no
           default database.

               NNoottee
               This feature requires a MySQL client that is compiled with
               the rreeaaddlliinnee library. Typically, the rreeaaddlliinnee library is
               not available on Windows.

       •   ----aauuttoo--vveerrttiiccaall--oouuttppuutt

           Cause result sets to be displayed vertically if they are too
           wide for the current window, and using normal tabular format
           otherwise. (This applies to statements terminated by ; or \G.)

       •   ----bbaattcchh, --BB

           Print results using tab as the column separator, with each row
           on a new line. With this option, mmyyssqqll does not use the history
           file.

           Batch mode results in nontabular output format and escaping of
           special characters. Escaping may be disabled by using raw mode;
           see the description for the ----rraaww option.

       •   ----bbiinnaarryy--aass--hheexx

           When this option is given, mmyyssqqll displays binary data using
           hexadecimal notation (0x_v_a_l_u_e). This occurs whether the overall
           output dislay format is tabular, vertical, HTML, or XML.

           This option was added in MySQL 5.7.19.

       •   ----bbiinnaarryy--mmooddee

           This option helps when processing mmyyssqqllbbiinnlloogg output that may
           contain BLOB values. By default, mmyyssqqll translates \r\n in
           statement strings to \n and interprets \0 as the statement
           terminator.  ----bbiinnaarryy--mmooddee disables both features. It also
           disables all mmyyssqqll commands except charset and delimiter in
           noninteractive mode (for input piped to mmyyssqqll or loaded using
           the source command).

       •   ----bbiinndd--aaddddrreessss==_i_p___a_d_d_r_e_s_s

           On a computer having multiple network interfaces, use this
           option to select which interface to use for connecting to the
           MySQL server.

       •   ----cchhaarraacctteerr--sseettss--ddiirr==_d_i_r___n_a_m_e

           The directory where character sets are installed. See
           Section 10.14, “Character Set Configuration”.

       •   ----ccoolluummnn--nnaammeess

           Write column names in results.

       •   ----ccoolluummnn--ttyyppee--iinnffoo

           Display result set metadata.

       •   ----ccoommmmeennttss, --cc

           Whether to strip or preserve comments in statements sent to the
           server. The default is ----sskkiipp--ccoommmmeennttss (strip comments), enable
           with ----ccoommmmeennttss (preserve comments).

               NNoottee
               In MySQL 5.7, the mmyyssqqll client always passes optimizer
               hints to the server, regardless of whether this option is
               given. To ensure that optimizer hints are not stripped if
               you are using an older version of the mmyyssqqll client with a
               version of the server that understands optimizer hints,
               invoke mmyyssqqll with the ----ccoommmmeennttss option.

               Comment stripping is deprecated as of MySQL 5.7.20. This
               feature and the options to control it will be removed in a
               future MySQL release.

       •   ----ccoommpprreessss, --CC

           Compress all information sent between the client and the server
           if both support compression.

       •   ----ccoonnnneecctt--eexxppiirreedd--ppaasssswwoorrdd

           Indicate to the server that the client can handle sandbox mode
           if the account used to connect has an expired password. This
           can be useful for noninteractive invocations of mmyyssqqll because
           normally the server disconnects noninteractive clients that
           attempt to connect using an account with an expired password.
           (See Section 6.2.12, “Password Expiration and Sandbox Mode”.)

       •   ----ddaattaabbaassee==_d_b___n_a_m_e, --DD _d_b___n_a_m_e

           The database to use. This is useful primarily in an option
           file.

       •   ----ddeebbuugg[[==_d_e_b_u_g___o_p_t_i_o_n_s]], --## [[_d_e_b_u_g___o_p_t_i_o_n_s]]

           Write a debugging log. A typical _d_e_b_u_g___o_p_t_i_o_n_s string is
           d:t:o,_f_i_l_e___n_a_m_e. The default is d:t:o,/tmp/mysql.trace.

           This option is available only if MySQL was built using
           WWIITTHH__DDEEBBUUGG. MySQL release binaries provided by Oracle are _n_o_t
           built using this option.

       •   ----ddeebbuugg--cchheecckk

           Print some debugging information when the program exits.

       •   ----ddeebbuugg--iinnffoo, --TT

           Print debugging information and memory and CPU usage statistics
           when the program exits.

       •   ----ddeeffaauulltt--aauutthh==_p_l_u_g_i_n

           A hint about the client-side authentication plugin to use. See
           Section 6.2.13, “Pluggable Authentication”.

       •   ----ddeeffaauulltt--cchhaarraacctteerr--sseett==_c_h_a_r_s_e_t___n_a_m_e

           Use _c_h_a_r_s_e_t___n_a_m_e as the default character set for the client
           and connection.

           This option can be useful if the operating system uses one
           character set and the mmyyssqqll client by default uses another. In
           this case, output may be formatted incorrectly. You can usually
           fix such issues by using this option to force the client to use
           the system character set instead.

           For more information, see Section 10.4, “Connection Character
           Sets and Collations”, and Section 10.14, “Character Set
           Configuration”.

       •   ----ddeeffaauullttss--eexxttrraa--ffiillee==_f_i_l_e___n_a_m_e

           Read this option file after the global option file but (on
           Unix) before the user option file. If the file does not exist
           or is otherwise inaccessible, an error occurs.  _f_i_l_e___n_a_m_e is
           interpreted relative to the current directory if given as a
           relative path name rather than a full path name.

           For additional information about this and other option-file
           options, see Section 4.2.7, “Command-Line Options that Affect
           Option-File Handling”.

       •   ----ddeeffaauullttss--ffiillee==_f_i_l_e___n_a_m_e

           Use only the given option file. If the file does not exist or
           is otherwise inaccessible, an error occurs.  _f_i_l_e___n_a_m_e is
           interpreted relative to the current directory if given as a
           relative path name rather than a full path name.

           Exception: Even with ----ddeeffaauullttss--ffiillee, client programs read
           .mylogin.cnf.

           For additional information about this and other option-file
           options, see Section 4.2.7, “Command-Line Options that Affect
           Option-File Handling”.

       •   ----ddeeffaauullttss--ggrroouupp--ssuuffffiixx==_s_t_r

           Read not only the usual option groups, but also groups with the
           usual names and a suffix of _s_t_r. For example, mmyyssqqll normally
           reads the [client] and [mysql] groups. If the
           ----ddeeffaauullttss--ggrroouupp--ssuuffffiixx==__ootthheerr option is given, mmyyssqqll also
           reads the [client_other] and [mysql_other] groups.

           For additional information about this and other option-file
           options, see Section 4.2.7, “Command-Line Options that Affect
           Option-File Handling”.

       •   ----ddeelliimmiitteerr==_s_t_r

           Set the statement delimiter. The default is the semicolon
           character (;).

       •   ----ddiissaabbllee--nnaammeedd--ccoommmmaannddss

           Disable named commands. Use the \* form only, or use named
           commands only at the beginning of a line ending with a
           semicolon (;).  mmyyssqqll starts with this option _e_n_a_b_l_e_d by
           default. However, even with this option, long-format commands
           still work from the first line. See the section called “MYSQL
           CLIENT COMMANDS”.

       •   ----eennaabbllee--cclleeaarrtteexxtt--pplluuggiinn

           Enable the mysql_clear_password cleartext authentication
           plugin. (See Section 6.4.1.6, “Client-Side Cleartext Pluggable
           Authentication”.)

       •   ----eexxeeccuuttee==_s_t_a_t_e_m_e_n_t, --ee _s_t_a_t_e_m_e_n_t

           Execute the statement and quit. The default output format is
           like that produced with ----bbaattcchh. See Section 4.2.4, “Using
           Options on the Command Line”, for some examples. With this
           option, mmyyssqqll does not use the history file.

       •   ----ffoorrccee, --ff

           Continue even if an SQL error occurs.

       •   ----ggeett--sseerrvveerr--ppuubblliicc--kkeeyy

           Request from the server the public key required for RSA key
           pair-based password exchange. This option applies to clients
           that that authenticate with the caching_sha2_password
           authentication plugin. For that plugin, the server does not
           send the public key unless requested. This option is ignored
           for accounts that do not authenticate with that plugin. It is
           also ignored if RSA-based password exchange is not used, as is
           the case when the client connects to the server using a secure
           connection.

           If ----sseerrvveerr--ppuubblliicc--kkeeyy--ppaatthh==_f_i_l_e___n_a_m_e is given and specifies a
           valid public key file, it takes precedence over
           ----ggeett--sseerrvveerr--ppuubblliicc--kkeeyy.

           For information about the caching_sha2_password plugin, see
           Section 6.4.1.5, “Caching SHA-2 Pluggable Authentication”.

           The ----ggeett--sseerrvveerr--ppuubblliicc--kkeeyy option was added in MySQL 5.7.23.

       •   ----hhiissttiiggnnoorree

           A list of one or more colon-separated patterns specifying
           statements to ignore for logging purposes. These patterns are
           added to the default pattern list ("*IDENTIFIED*:*PASSWORD*").
           The value specified for this option affects logging of
           statements written to the history file, and to syslog if the
           ----ssyysslloogg option is given. For more information, see the section
           called “MYSQL CLIENT LOGGING”.

       •   ----hhoosstt==_h_o_s_t___n_a_m_e, --hh _h_o_s_t___n_a_m_e

           Connect to the MySQL server on the given host.

       •   ----hhttmmll, --HH

           Produce HTML output.

       •   ----iiggnnoorree--ssppaacceess, --ii

           Ignore spaces after function names. The effect of this is
           described in the discussion for the IGNORE_SPACE SQL mode (see
           Section 5.1.10, “Server SQL Modes”).

       •   ----iinniitt--ccoommmmaanndd==ssttrr

           SQL statement to execute after connecting to the server. If
           auto-reconnect is enabled, the statement is executed again
           after reconnection occurs.

       •   ----lliinnee--nnuummbbeerrss

           Write line numbers for errors. Disable this with
           ----sskkiipp--lliinnee--nnuummbbeerrss.

       •   ----llooccaall--iinnffiillee[[=={{00||11}}]]

           Enable or disable LOCAL capability for LOAD DATA. For mmyyssqqll,
           this capability is disabled by default. With no value, the
           option enables LOCAL. The option may be given as
           ----llooccaall--iinnffiillee==00 or ----llooccaall--iinnffiillee==11 to explicitly disable or
           enable LOCAL. Enabling local data loading also requires that
           the server permits it; see Section 6.1.6, “Security Issues with
           LOAD DATA LOCAL”

       •   ----llooggiinn--ppaatthh==_n_a_m_e

           Read options from the named login path in the .mylogin.cnf
           login path file. A “login path” is an option group containing
           options that specify which MySQL server to connect to and which
           account to authenticate as. To create or modify a login path
           file, use the mmyyssqqll__ccoonnffiigg__eeddiittoorr utility. See
           mmyyssqqll__ccoonnffiigg__eeddiittoorr(1).

           For additional information about this and other option-file
           options, see Section 4.2.7, “Command-Line Options that Affect
           Option-File Handling”.

       •   ----nnaammeedd--ccoommmmaannddss, --GG

           Enable named mmyyssqqll commands. Long-format commands are
           permitted, not just short-format commands. For example, quit
           and \q both are recognized. Use ----sskkiipp--nnaammeedd--ccoommmmaannddss to
           disable named commands. See the section called “MYSQL CLIENT
           COMMANDS”.

       •   ----nnoo--aauuttoo--rreehhaasshh, --AA

           This has the same effect as ----sskkiipp--aauuttoo--rreehhaasshh. See the
           description for ----aauuttoo--rreehhaasshh.

       •   ----nnoo--bbeeeepp, --bb

           Do not beep when errors occur.

       •   ----nnoo--ddeeffaauullttss

           Do not read any option files. If program startup fails due to
           reading unknown options from an option file, ----nnoo--ddeeffaauullttss can
           be used to prevent them from being read.

           The exception is that the .mylogin.cnf file, if it exists, is
           read in all cases. This permits passwords to be specified in a
           safer way than on the command line even when ----nnoo--ddeeffaauullttss is
           used. (.mylogin.cnf is created by the mmyyssqqll__ccoonnffiigg__eeddiittoorr
           utility. See mmyyssqqll__ccoonnffiigg__eeddiittoorr(1).)

           For additional information about this and other option-file
           options, see Section 4.2.7, “Command-Line Options that Affect
           Option-File Handling”.

       •   ----oonnee--ddaattaabbaassee, --oo

           Ignore statements except those that occur while the default
           database is the one named on the command line. This option is
           rudimentary and should be used with care. Statement filtering
           is based only on USE statements.

           Initially, mmyyssqqll executes statements in the input because
           specifying a database _d_b___n_a_m_e on the command line is equivalent
           to inserting USE _d_b___n_a_m_e at the beginning of the input. Then,
           for each USE statement encountered, mmyyssqqll accepts or rejects
           following statements depending on whether the database named is
           the one on the command line. The content of the statements is
           immaterial.

           Suppose that mmyyssqqll is invoked to process this set of
           statements:

               DELETE FROM db2.t2;
               USE db2;
               DROP TABLE db1.t1;
               CREATE TABLE db1.t1 (i INT);
               USE db1;
               INSERT INTO t1 (i) VALUES(1);
               CREATE TABLE db2.t1 (j INT);

           If the command line is mmyyssqqll ----ffoorrccee ----oonnee--ddaattaabbaassee ddbb11, mmyyssqqll
           handles the input as follows:

           •   The DELETE statement is executed because the default
               database is db1, even though the statement names a table in
               a different database.

           •   The DROP TABLE and CREATE TABLE statements are not executed
               because the default database is not db1, even though the
               statements name a table in db1.

           •   The INSERT and CREATE TABLE statements are executed because
               the default database is db1, even though the CREATE TABLE
               statement names a table in a different database.

       •   ----ppaaggeerr[[==_c_o_m_m_a_n_d]]

           Use the given command for paging query output. If the command
           is omitted, the default pager is the value of your PAGER
           environment variable. Valid pagers are lleessss, mmoorree, ccaatt [[>>
           ffiilleennaammee]], and so forth. This option works only on Unix and
           only in interactive mode. To disable paging, use ----sskkiipp--ppaaggeerr.
           the section called “MYSQL CLIENT COMMANDS”, discusses output
           paging further.

       •   ----ppaasssswwoorrdd[[==_p_a_s_s_w_o_r_d]], --pp[[_p_a_s_s_w_o_r_d]]

           The password to use when connecting to the server. If you use
           the short option form (--pp), you _c_a_n_n_o_t have a space between the
           option and the password. If you omit the _p_a_s_s_w_o_r_d value
           following the ----ppaasssswwoorrdd or --pp option on the command line,
           mmyyssqqll prompts for one.

           Specifying a password on the command line should be considered
           insecure. See Section 6.1.2.1, “End-User Guidelines for
           Password Security”. You can use an option file to avoid giving
           the password on the command line.

       •   ----ppiippee, --WW

           On Windows, connect to the server using a named pipe. This
           option applies only if the server supports named-pipe
           connections.

       •   ----pplluuggiinn--ddiirr==_d_i_r___n_a_m_e

           The directory in which to look for plugins. Specify this option
           if the ----ddeeffaauulltt--aauutthh option is used to specify an
           authentication plugin but mmyyssqqll does not find it. See
           Section 6.2.13, “Pluggable Authentication”.

       •   ----ppoorrtt==_p_o_r_t___n_u_m, --PP _p_o_r_t___n_u_m

           The TCP/IP port number to use for the connection.

       •   ----pprriinntt--ddeeffaauullttss

           Print the program name and all options that it gets from option
           files.

           For additional information about this and other option-file
           options, see Section 4.2.7, “Command-Line Options that Affect
           Option-File Handling”.

       •   ----pprroommpptt==_f_o_r_m_a_t___s_t_r

           Set the prompt to the specified format. The default is mysql>.
           The special sequences that the prompt can contain are described
           in the section called “MYSQL CLIENT COMMANDS”.

       •   ----pprroottooccooll=={{TTCCPP||SSOOCCKKEETT||PPIIPPEE||MMEEMMOORRYY}}

           The connection protocol to use for connecting to the server. It
           is useful when the other connection parameters normally would
           cause a protocol to be used other than the one you want. For
           details on the permissible values, see Section 4.2.2,
           “Connecting to the MySQL Server”.

       •   ----qquuiicckk, --qq

           Do not cache each query result, print each row as it is
           received. This may slow down the server if the output is
           suspended. With this option, mmyyssqqll does not use the history
           file.

       •   ----rraaww, --rr

           For tabular output, the “boxing” around columns enables one
           column value to be distinguished from another. For nontabular
           output (such as is produced in batch mode or when the ----bbaattcchh
           or ----ssiilleenntt option is given), special characters are escaped in
           the output so they can be identified easily. Newline, tab, NUL,
           and backslash are written as \n, \t, \0, and \\. The ----rraaww
           option disables this character escaping.

           The following example demonstrates tabular versus nontabular
           output and the use of raw mode to disable escaping:

               % mmyyssqqll
               mysql> SELECT CHAR(92);
               +----------+
               | CHAR(92) |
               +----------+
               | \        |
               +----------+
               % mmyyssqqll --ss
               mysql> SELECT CHAR(92);
               CHAR(92)
               \\
               % mmyyssqqll --ss --rr
               mysql> SELECT CHAR(92);
               CHAR(92)
               \

       •   ----rreeccoonnnneecctt

           If the connection to the server is lost, automatically try to
           reconnect. A single reconnect attempt is made each time the
           connection is lost. To suppress reconnection behavior, use
           ----sskkiipp--rreeccoonnnneecctt.

       •   ----ssaaffee--uuppddaatteess, ----ii--aamm--aa--dduummmmyy, --UU

           If this option is enabled, UPDATE and DELETE statements that do
           not use a key in the WHERE clause or a LIMIT clause produce an
           error. In addition, restrictions are placed on SELECT
           statements that produce (or are estimated to produce) very
           large result sets. If you have set this option in an option
           file, you can use ----sskkiipp--ssaaffee--uuppddaatteess on the command line to
           override it. For more information about this option, see the
           section called “Using Safe-Updates Mode (--safe-updates)”.

       •   ----sseeccuurree--aauutthh

           Do not send passwords to the server in old (pre-4.1) format.
           This prevents connections except for servers that use the newer
           password format.

           As of MySQL 5.7.5, this option is deprecated and will be
           removed in a future MySQL release. It is always enabled and
           attempting to disable it (----sskkiipp--sseeccuurree--aauutthh, ----sseeccuurree--aauutthh==00)
           produces an error. Before MySQL 5.7.5, this option is enabled
           by default but can be disabled.

               NNoottee
               Passwords that use the pre-4.1 hashing method are less
               secure than passwords that use the native password hashing
               method and should be avoided. Pre-4.1 passwords are
               deprecated and support for them was removed in MySQL 5.7.5.
               For account upgrade instructions, see Section 6.4.1.3,
               “Migrating Away from Pre-4.1 Password Hashing and the
               mysql_old_password Plugin”.

       •   ----sseerrvveerr--ppuubblliicc--kkeeyy--ppaatthh==_f_i_l_e___n_a_m_e

           The path name to a file containing a client-side copy of the
           public key required by the server for RSA key pair-based
           password exchange. The file must be in PEM format. This option
           applies to clients that authenticate with the sha256_password
           authentication plugin. This option is ignored for accounts that
           do not authenticate with one of those plugins. It is also
           ignored if RSA-based password exchange is not used, as is the
           case when the client connects to the server using a secure
           connection.

           This option is available only if MySQL was built using OpenSSL.

           For information about the sha256_password and
           caching_sha2_password plugins, see Section 6.4.1.4, “SHA-256
           Pluggable Authentication”, and Section 6.4.1.5, “Caching SHA-2
           Pluggable Authentication”.

       •   ----sshhaarreedd--mmeemmoorryy--bbaassee--nnaammee==_n_a_m_e

           On Windows, the shared-memory name to use, for connections made
           using shared memory to a local server. The default value is
           MYSQL. The shared-memory name is case-sensitive.

           The server must be started with the ----sshhaarreedd--mmeemmoorryy option to
           enable shared-memory connections.

       •   ----sshhooww--wwaarrnniinnggss

           Cause warnings to be shown after each statement if there are
           any. This option applies to interactive and batch mode.

       •   ----ssiiggiinntt--iiggnnoorree

           Ignore SIGINT signals (typically the result of typing
           Control+C).

       •   ----ssiilleenntt, --ss

           Silent mode. Produce less output. This option can be given
           multiple times to produce less and less output.

           This option results in nontabular output format and escaping of
           special characters. Escaping may be disabled by using raw mode;
           see the description for the ----rraaww option.

       •   ----sskkiipp--ccoolluummnn--nnaammeess, --NN

           Do not write column names in results.

       •   ----sskkiipp--lliinnee--nnuummbbeerrss, --LL

           Do not write line numbers for errors. Useful when you want to
           compare result files that include error messages.

       •   ----ssoocckkeett==_p_a_t_h, --SS _p_a_t_h

           For connections to localhost, the Unix socket file to use, or,
           on Windows, the name of the named pipe to use.

       •   ----ssssll**

           Options that begin with ----ssssll specify whether to connect to the
           server using SSL and indicate where to find SSL keys and
           certificates. See Section 6.3.2, “Command Options for Encrypted
           Connections”.

       •   ----ssyysslloogg, --jj

           This option causes mmyyssqqll to send interactive statements to the
           system logging facility. On Unix, this is syslog; on Windows,
           it is the Windows Event Log. The destination where logged
           messages appear is system dependent. On Linux, the destination
           is often the /var/log/messages file.

           Here is a sample of output generated on Linux by using
           ----ssyysslloogg. This output is formatted for readability; each logged
           message actually takes a single line.

               Mar  7 12:39:25 myhost MysqlClient[20824]:
                 SYSTEM_USER:'oscar', MYSQL_USER:'my_oscar', CONNECTION_ID:23,
                 DB_SERVER:'127.0.0.1', DB:'--', QUERY:'USE test;'
               Mar  7 12:39:28 myhost MysqlClient[20824]:
                 SYSTEM_USER:'oscar', MYSQL_USER:'my_oscar', CONNECTION_ID:23,
                 DB_SERVER:'127.0.0.1', DB:'test', QUERY:'SHOW TABLES;'

           For more information, see the section called “MYSQL CLIENT
           LOGGING”.

           The ----ssyysslloogg option was added in MySQL 5.7.1.

       •   ----ttaabbllee, --tt

           Display output in table format. This is the default for
           interactive use, but can be used to produce table output in
           batch mode.

       •   ----tteeee==_f_i_l_e___n_a_m_e

           Append a copy of output to the given file. This option works
           only in interactive mode.  the section called “MYSQL CLIENT
           COMMANDS”, discusses tee files further.

       •   ----ttllss--vveerrssiioonn==_p_r_o_t_o_c_o_l___l_i_s_t

           The protocols the client permits for encrypted connections. The
           value is a list of one or more comma-separated protocol names.
           The protocols that can be named for this option depend on the
           SSL library used to compile MySQL. For details, see
           Section 6.3.6, “Encrypted Connection Protocols and Ciphers”.

           This option was added in MySQL 5.7.10.

       •   ----uunnbbuuffffeerreedd, --nn

           Flush the buffer after each query.

       •   ----uusseerr==_u_s_e_r___n_a_m_e, --uu _u_s_e_r___n_a_m_e

           The MySQL user name to use when connecting to the server.

       •   ----vveerrbboossee, --vv

           Verbose mode. Produce more output about what the program does.
           This option can be given multiple times to produce more and
           more output. (For example, --vv --vv --vv produces table output
           format even in batch mode.)

       •   ----vveerrssiioonn, --VV

           Display version information and exit.

       •   ----vveerrttiiccaall, --EE

           Print query output rows vertically (one line per column value).
           Without this option, you can specify vertical output for
           individual statements by terminating them with \G.

       •   ----wwaaiitt, --ww

           If the connection cannot be established, wait and retry instead
           of aborting.

       •   ----xxmmll, --XX

           Produce XML output.

               <field name="_c_o_l_u_m_n___n_a_m_e">NULL</field>

           The output when ----xxmmll is used with mmyyssqqll matches that of
           mmyyssqqlldduummpp ----xxmmll. See mmyyssqqlldduummpp(1), for details.

           The XML output also uses an XML namespace, as shown here:

               shell> mmyyssqqll ----xxmmll --uurroooott --ee ""SSHHOOWW VVAARRIIAABBLLEESS LLIIKKEE ''vveerrssiioonn%%''""
               <?xml version="1.0"?>
               <resultset statement="SHOW VARIABLES LIKE 'version%'" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               <row>
               <field name="Variable_name">version</field>
               <field name="Value">5.0.40-debug</field>
               </row>
               <row>
               <field name="Variable_name">version_comment</field>
               <field name="Value">Source distribution</field>
               </row>
               <row>
               <field name="Variable_name">version_compile_machine</field>
               <field name="Value">i686</field>
               </row>
               <row>
               <field name="Variable_name">version_compile_os</field>
               <field name="Value">suse-linux-gnu</field>
               </row>
               </resultset>

           (See Bug #25946.)

       You can also set the following variables by using ----_v_a_r___n_a_m_e==_v_a_l_u_e.

       •   connect_timeout

           The number of seconds before connection timeout. (Default value
           is 0.)

       •   max_allowed_packet

           The maximum size of the buffer for client/server communication.
           The default is 16MB, the maximum is 1GB.

       •   max_join_size

           The automatic limit for rows in a join when using
           ----ssaaffee--uuppddaatteess. (Default value is 1,000,000.)

       •   net_buffer_length

           The buffer size for TCP/IP and socket communication. (Default
           value is 16KB.)

       •   select_limit

           The automatic limit for SELECT statements when using
           ----ssaaffee--uuppddaatteess. (Default value is 1,000.)

MMYYSSQQLL CCLLIIEENNTT CCOOMMMMAANNDDSS
       mmyyssqqll sends each SQL statement that you issue to the server to be
       executed. There is also a set of commands that mmyyssqqll itself
       interprets. For a list of these commands, type help or \h at the
       mysql> prompt:

           mysql> hheellpp
           List of all MySQL commands:
           Note that all text commands must be first on line and end with ';'
           ?         (\?) Synonym for `help'.
           clear     (\c) Clear the current input statement.
           connect   (\r) Reconnect to the server. Optional arguments are db and host.
           delimiter (\d) Set statement delimiter.
           edit      (\e) Edit command with $EDITOR.
           ego       (\G) Send command to mysql server, display result vertically.
           exit      (\q) Exit mysql. Same as quit.
           go        (\g) Send command to mysql server.
           help      (\h) Display this help.
           nopager   (\n) Disable pager, print to stdout.
           notee     (\t) Don't write into outfile.
           pager     (\P) Set PAGER [to_pager]. Print the query results via PAGER.
           print     (\p) Print current command.
           prompt    (\R) Change your mysql prompt.
           quit      (\q) Quit mysql.
           rehash    (\#) Rebuild completion hash.
           source    (\.) Execute an SQL script file. Takes a file name as an argument.
           status    (\s) Get status information from the server.
           system    (\!) Execute a system shell command.
           tee       (\T) Set outfile [to_outfile]. Append everything into given
                          outfile.
           use       (\u) Use another database. Takes database name as argument.
           charset   (\C) Switch to another charset. Might be needed for processing
                          binlog with multi-byte charsets.
           warnings  (\W) Show warnings after every statement.
           nowarning (\w) Don't show warnings after every statement.
           resetconnection(\x) Clean session context.
           For server side help, type 'help contents'

       If mmyyssqqll is invoked with the ----bbiinnaarryy--mmooddee option, all mmyyssqqll
       commands are disabled except charset and delimiter in
       noninteractive mode (for input piped to mmyyssqqll or loaded using the
       source command).

       Each command has both a long and short form. The long form is not
       case-sensitive; the short form is. The long form can be followed by
       an optional semicolon terminator, but the short form should not.

       The use of short-form commands within multiple-line /* ... */
       comments is not supported.

       •   help [_a_r_g], \h [_a_r_g], \? [_a_r_g], ? [_a_r_g]

           Display a help message listing the available mmyyssqqll commands.

           If you provide an argument to the help command, mmyyssqqll uses it
           as a search string to access server-side help from the contents
           of the MySQL Reference Manual. For more information, see the
           section called “MYSQL CLIENT SERVER-SIDE HELP”.

       •   charset _c_h_a_r_s_e_t___n_a_m_e, \C _c_h_a_r_s_e_t___n_a_m_e

           Change the default character set and issue a SET NAMES
           statement. This enables the character set to remain
           synchronized on the client and server if mmyyssqqll is run with
           auto-reconnect enabled (which is not recommended), because the
           specified character set is used for reconnects.

       •   clear, \c

           Clear the current input. Use this if you change your mind about
           executing the statement that you are entering.

       •   connect [_d_b___n_a_m_e _h_o_s_t___n_a_m_e]], \r [_d_b___n_a_m_e _h_o_s_t___n_a_m_e]]

           Reconnect to the server. The optional database name and host
           name arguments may be given to specify the default database or
           the host where the server is running. If omitted, the current
           values are used.

       •   delimiter _s_t_r, \d _s_t_r

           Change the string that mmyyssqqll interprets as the separator
           between SQL statements. The default is the semicolon character
           (;).

           The delimiter string can be specified as an unquoted or quoted
           argument on the delimiter command line. Quoting can be done
           with either single quote ('), double quote ("), or backtick (`)
           characters. To include a quote within a quoted string, either
           quote the string with a different quote character or escape the
           quote with a backslash (\) character. Backslash should be
           avoided outside of quoted strings because it is the escape
           character for MySQL. For an unquoted argument, the delimiter is
           read up to the first space or end of line. For a quoted
           argument, the delimiter is read up to the matching quote on the
           line.

           mmyyssqqll interprets instances of the delimiter string as a
           statement delimiter anywhere it occurs, except within quoted
           strings. Be careful about defining a delimiter that might occur
           within other words. For example, if you define the delimiter as
           X, you will be unable to use the word INDEX in statements.
           mmyyssqqll interprets this as INDE followed by the delimiter X.

           When the delimiter recognized by mmyyssqqll is set to something
           other than the default of ;, instances of that character are
           sent to the server without interpretation. However, the server
           itself still interprets ; as a statement delimiter and
           processes statements accordingly. This behavior on the server
           side comes into play for multiple-statement execution (see
           Section 27.8.16, “C API Multiple Statement Execution Support”),
           and for parsing the body of stored procedures and functions,
           triggers, and events (see Section 23.1, “Defining Stored
           Programs”).

       •   edit, \e

           Edit the current input statement.  mmyyssqqll checks the values of
           the EDITOR and VISUAL environment variables to determine which
           editor to use. The default editor is vvii if neither variable is
           set.

           The edit command works only in Unix.

       •   ego, \G

           Send the current statement to the server to be executed and
           display the result using vertical format.

       •   exit, \q

           Exit mmyyssqqll.

       •   go, \g

           Send the current statement to the server to be executed.

       •   nopager, \n

           Disable output paging. See the description for pager.

           The nopager command works only in Unix.

       •   notee, \t

           Disable output copying to the tee file. See the description for
           tee.

       •   nowarning, \w

           Disable display of warnings after each statement.

       •   pager [_c_o_m_m_a_n_d], \P [_c_o_m_m_a_n_d]

           Enable output paging. By using the ----ppaaggeerr option when you
           invoke mmyyssqqll, it is possible to browse or search query results
           in interactive mode with Unix programs such as lleessss, mmoorree, or
           any other similar program. If you specify no value for the
           option, mmyyssqqll checks the value of the PAGER environment
           variable and sets the pager to that. Pager functionality works
           only in interactive mode.

           Output paging can be enabled interactively with the pager
           command and disabled with nopager. The command takes an
           optional argument; if given, the paging program is set to that.
           With no argument, the pager is set to the pager that was set on
           the command line, or stdout if no pager was specified.

           Output paging works only in Unix because it uses the popen()
           function, which does not exist on Windows. For Windows, the tee
           option can be used instead to save query output, although it is
           not as convenient as pager for browsing output in some
           situations.

       •   print, \p

           Print the current input statement without executing it.

       •   prompt [_s_t_r], \R [_s_t_r]

           Reconfigure the mmyyssqqll prompt to the given string. The special
           character sequences that can be used in the prompt are
           described later in this section.

           If you specify the prompt command with no argument, mmyyssqqll
           resets the prompt to the default of mysql>.

       •   quit, \q

           Exit mmyyssqqll.

       •   rehash, \#

           Rebuild the completion hash that enables database, table, and
           column name completion while you are entering statements. (See
           the description for the ----aauuttoo--rreehhaasshh option.)

       •   resetconnection, \x

           Reset the connection to clear the session state.

           Resetting a connection has effects similar to
           mysql_change_user() or an auto-reconnect except that the
           connection is not closed and reopened, and re-authentication is
           not done. See Section 27.8.7.3, “mysql_change_user()”) and see
           Section 27.8.20, “C API Automatic Reconnection Control”).

           This example shows how resetconnection clears a value
           maintained in the session state:

               mysql> SSEELLEECCTT LLAASSTT__IINNSSEERRTT__IIDD((33));;
               +-------------------+
               | LAST_INSERT_ID(3) |
               +-------------------+
               |                 3 |
               +-------------------+
               mysql> SSEELLEECCTT LLAASSTT__IINNSSEERRTT__IIDD(());;
               +------------------+
               | LAST_INSERT_ID() |
               +------------------+
               |                3 |
               +------------------+
               mysql> rreesseettccoonnnneeccttiioonn;;
               mysql> SSEELLEECCTT LLAASSTT__IINNSSEERRTT__IIDD(());;
               +------------------+
               | LAST_INSERT_ID() |
               +------------------+
               |                0 |
               +------------------+

       •   source _f_i_l_e___n_a_m_e, \. _f_i_l_e___n_a_m_e

           Read the named file and executes the statements contained
           therein. On Windows, you can specify path name separators as /
           or \\.

           Quote characters are taken as part of the file name itself. For
           best results, the name should not include space characters.

       •   status, \s

           Provide status information about the connection and the server
           you are using. If you are running with ----ssaaffee--uuppddaatteess enabled,
           status also prints the values for the mmyyssqqll variables that
           affect your queries.

       •   system _c_o_m_m_a_n_d, \! _c_o_m_m_a_n_d

           Execute the given command using your default command
           interpreter.

           The system command works only in Unix.

       •   tee [_f_i_l_e___n_a_m_e], \T [_f_i_l_e___n_a_m_e]

           By using the ----tteeee option when you invoke mmyyssqqll, you can log
           statements and their output. All the data displayed on the
           screen is appended into a given file. This can be very useful
           for debugging purposes also.  mmyyssqqll flushes results to the file
           after each statement, just before it prints its next prompt.
           Tee functionality works only in interactive mode.

           You can enable this feature interactively with the tee command.
           Without a parameter, the previous file is used. The tee file
           can be disabled with the notee command. Executing tee again
           re-enables logging.

       •   use _d_b___n_a_m_e, \u _d_b___n_a_m_e

           Use _d_b___n_a_m_e as the default database.

       •   warnings, \W

           Enable display of warnings after each statement (if there are
           any).

       Here are a few tips about the pager command:

       •   You can use it to write to a file and the results go only to
           the file:

               mysql> ppaaggeerr ccaatt >> //ttmmpp//lloogg..ttxxtt

           You can also pass any options for the program that you want to
           use as your pager:

               mysql> ppaaggeerr lleessss --nn --ii --SS

       •   In the preceding example, note the --SS option. You may find it
           very useful for browsing wide query results. Sometimes a very
           wide result set is difficult to read on the screen. The --SS
           option to lleessss can make the result set much more readable
           because you can scroll it horizontally using the left-arrow and
           right-arrow keys. You can also use --SS interactively within lleessss
           to switch the horizontal-browse mode on and off. For more
           information, read the lleessss manual page:

               shell> mmaann lleessss

       •   The --FF and --XX options may be used with lleessss to cause it to exit
           if output fits on one screen, which is convenient when no
           scrolling is necessary:

               mysql> ppaaggeerr lleessss --nn --ii --SS --FF --XX

       •   You can specify very complex pager commands for handling query
           output:

               mysql> ppaaggeerr ccaatt || tteeee //ddrr11//ttmmpp//rreess..ttxxtt \\
                         || tteeee //ddrr22//ttmmpp//rreess22..ttxxtt || lleessss --nn --ii --SS

           In this example, the command would send query results to two
           files in two different directories on two different file
           systems mounted on /dr1 and /dr2, yet still display the results
           onscreen using lleessss.

       You can also combine the tee and pager functions. Have a tee file
       enabled and pager set to lleessss, and you are able to browse the
       results using the lleessss program and still have everything appended
       into a file the same time. The difference between the Unix tee used
       with the pager command and the mmyyssqqll built-in tee command is that
       the built-in tee works even if you do not have the Unix tteeee
       available. The built-in tee also logs everything that is printed on
       the screen, whereas the Unix tteeee used with pager does not log quite
       that much. Additionally, tee file logging can be turned on and off
       interactively from within mmyyssqqll. This is useful when you want to
       log some queries to a file, but not others.

       The prompt command reconfigures the default mysql> prompt. The
       string for defining the prompt can contain the following special
       sequences.

.br
.br
.br
72
       ┌─────────────────────┬────────────────────────────┐
       │OOppttiioonn               │ DDeessccrriippttiioonn                │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The current connection     │
       │                     │ identifier                 │
       ├─────────────────────┼────────────────────────────┤
       │                     │ A counter that increments  │
       │                     │ for each statement you     │
       │                     │ issue                      │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The full current date      │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The default database       │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The server host            │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The current delimiter      │
       ├─────────────────────┼────────────────────────────┤
       │                     │ Minutes of the current     │
       │                     │ time                       │
       ├─────────────────────┼────────────────────────────┤
       │                     │ A newline character        │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The current month in       │
       │                     │ three-letter format (Jan,  │
       │                     │ Feb, ...)                  │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The current month in       │
       │                     │ numeric format             │
       ├─────────────────────┼────────────────────────────┤
       │P                    │ am/pm                      │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The current TCP/IP port    │
       │                     │ or socket file             │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The current time, in       │
       │                     │ 24-hour military time      │
       │                     │ (0–23)                     │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The current time,          │
       │                     │ standard 12-hour time      │
       │                     │ (1–12)                     │
       ├─────────────────────┼────────────────────────────┤
       │                     │ Semicolon                  │
       ├─────────────────────┼────────────────────────────┤
       │                     │ Seconds of the current     │
       │                     │ time                       │
       ├─────────────────────┼────────────────────────────┤
       │                     │ A tab character            │
       ├─────────────────────┼────────────────────────────┤
       │U                    │                            │
       │                     │        Your full           │
       │                     │        _u_s_e_r___n_a_m_e@_h_o_s_t___n_a_m_e │
       │                     │        account name        │
       ├─────────────────────┼────────────────────────────┤
       │                     │ Your user name             │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The server version         │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The current day of the     │
       │                     │ week in three-letter       │
       │                     │ format (Mon, Tue, ...)     │
       ├─────────────────────┼────────────────────────────┤
       │                     │ The current year, four     │
       │                     │ digits                     │
       ├─────────────────────┼────────────────────────────┤
       │y                    │ The current year, two      │
       │                     │ digits                     │
       ├─────────────────────┼────────────────────────────┤
       │_                    │ A space                    │
       ├─────────────────────┼────────────────────────────┤
       │\                    │ A space (a space follows   │
       │                     │ the backslash)             │
       ├─────────────────────┼────────────────────────────┤
       │´                    │ Single quote               │
       ├─────────────────────┼────────────────────────────┤
       │                     │ Double quote               │
       ├─────────────────────┼────────────────────────────┤
       │T}:T{ A literal      │                            │
       │ backslash character │                            │
       ├─────────────────────┼────────────────────────────┤
       │\fIx                 │                            │
       │                     │        _x, for any “_x” not  │
       │                     │        listed above        │
       └─────────────────────┴────────────────────────────┘

       You can set the prompt in several ways:

       •   _U_s_e _a_n _e_n_v_i_r_o_n_m_e_n_t _v_a_r_i_a_b_l_e_.  You can set the MYSQL_PS1
           environment variable to a prompt string. For example:

               shell> eexxppoorrtt MMYYSSQQLL__PPSS11==""((\\uu@@\\hh)) [[\\dd]]>> ""

       •   _U_s_e _a _c_o_m_m_a_n_d_-_l_i_n_e _o_p_t_i_o_n_.  You can set the ----pprroommpptt option on
           the command line to mmyyssqqll. For example:

               shell> mmyyssqqll ----pprroommpptt==""((\\uu@@\\hh)) [[\\dd]]>> ""
               (user@host) [database]>

       •   _U_s_e _a_n _o_p_t_i_o_n _f_i_l_e_.  You can set the prompt option in the
           [mysql] group of any MySQL option file, such as /etc/my.cnf or
           the .my.cnf file in your home directory. For example:

               [mysql]
               prompt=(\\u@\\h) [\\d]>\\_

           In this example, note that the backslashes are doubled. If you
           set the prompt using the prompt option in an option file, it is
           advisable to double the backslashes when using the special
           prompt options. There is some overlap in the set of permissible
           prompt options and the set of special escape sequences that are
           recognized in option files. (The rules for escape sequences in
           option files are listed in Section 4.2.6, “Using Option
           Files”.) The overlap may cause you problems if you use single
           backslashes. For example, \s is interpreted as a space rather
           than as the current seconds value. The following example shows
           how to define a prompt within an option file to include the
           current time in HH:MM:SS> format:

               [mysql]
               prompt="\\r:\\m:\\s> "

       •   _S_e_t _t_h_e _p_r_o_m_p_t _i_n_t_e_r_a_c_t_i_v_e_l_y_.  You can change your prompt
           interactively by using the prompt (or \R) command. For example:

               mysql> pprroommpptt ((\\uu@@\\hh)) [[\\dd]]>>\\__
               PROMPT set to '(\u@\h) [\d]>\_'
               (_u_s_e_r@_h_o_s_t) [_d_a_t_a_b_a_s_e]>
               (_u_s_e_r@_h_o_s_t) [_d_a_t_a_b_a_s_e]> prompt
               Returning to default PROMPT of mysql>
               mysql>

MMYYSSQQLL CCLLIIEENNTT LLOOGGGGIINNGG
       The mmyyssqqll client can do these types of logging for statements
       executed interactively:

       •   On Unix, mmyyssqqll writes the statements to a history file. By
           default, this file is named .mysql_history in your home
           directory. To specify a different file, set the value of the
           MYSQL_HISTFILE environment variable.

       •   On all platforms, if the ----ssyysslloogg option is given, mmyyssqqll writes
           the statements to the system logging facility. On Unix, this is
           syslog; on Windows, it is the Windows Event Log. The
           destination where logged messages appear is system dependent.
           On Linux, the destination is often the /var/log/messages file.

       The following discussion describes characteristics that apply to
       all logging types and provides information specific to each logging
       type.

       •   How Logging Occurs

       •   Controlling the History File

       •   syslog Logging Characteristics
       How Logging Occurs.PP For each enabled logging destination,
       statement logging occurs as follows:

       •   Statements are logged only when executed interactively.
           Statements are noninteractive, for example, when read from a
           file or a pipe. It is also possible to suppress statement
           logging by using the ----bbaattcchh or ----eexxeeccuuttee option.

       •   Statements are ignored and not logged if they match any pattern
           in the “ignore” list. This list is described later.

       •   mmyyssqqll logs each nonignored, nonempty statement line
           individually.

       •   If a nonignored statement spans multiple lines (not including
           the terminating delimiter), mmyyssqqll concatenates the lines to
           form the complete statement, maps newlines to spaces, and logs
           the result, plus a delimiter.

       Consequently, an input statement that spans multiple lines can be
       logged twice. Consider this input:

           mysql> SSEELLEECCTT
               -> ''TTooddaayy iiss''
               -> ,,
               -> CCUURRDDAATTEE(())
               -> ;;

       In this case, mmyyssqqll logs the “SELECT”, “'Today is'”, “,”,
       “CURDATE()”, and “;” lines as it reads them. It also logs the
       complete statement, after mapping SELECT\n'Today is'\n,\nCURDATE()
       to SELECT 'Today is' , CURDATE(), plus a delimiter. Thus, these
       lines appear in logged output:

           SELECT
           'Today is'
           ,
           CURDATE()
           ;
           SELECT 'Today is' , CURDATE();

       mmyyssqqll ignores for logging purposes statements that match any
       pattern in the “ignore” list. By default, the pattern list is
       "*IDENTIFIED*:*PASSWORD*", to ignore statements that refer to
       passwords. Pattern matching is not case sensitive. Within patterns,
       two characters are special:

       •   ?  matches any single character.

       •   * matches any sequence of zero or more characters.

       To specify additional patterns, use the ----hhiissttiiggnnoorree option or set
       the MYSQL_HISTIGNORE environment variable. (If both are specified,
       the option value takes precedence.) The value should be a list of
       one or more colon-separated patterns, which are appended to the
       default pattern list.

       Patterns specified on the command line might need to be quoted or
       escaped to prevent your command interpreter from treating them
       specially. For example, to suppress logging for UPDATE and DELETE
       statements in addition to statements that refer to passwords,
       invoke mmyyssqqll like this:

           shell> mmyyssqqll ----hhiissttiiggnnoorree==""**UUPPDDAATTEE**::**DDEELLEETTEE**""

       Controlling the History File.PP The .mysql_history file should be
       protected with a restrictive access mode because sensitive
       information might be written to it, such as the text of SQL
       statements that contain passwords. See Section 6.1.2.1, “End-User
       Guidelines for Password Security”.

       If you do not want to maintain a history file, first remove
       .mysql_history if it exists. Then use either of the following
       techniques to prevent it from being created again:

       •   Set the MYSQL_HISTFILE environment variable to /dev/null. To
           cause this setting to take effect each time you log in, put it
           in one of your shell's startup files.

       •   Create .mysql_history as a symbolic link to /dev/null; this
           need be done only once:

               shell> llnn --ss //ddeevv//nnuullll $$HHOOMMEE//..mmyyssqqll__hhiissttoorryy
       syslog Logging Characteristics.PP If the ----ssyysslloogg option is given,
       mmyyssqqll writes interactive statements to the system logging facility.
       Message logging has the following characteristics.

       Logging occurs at the “information” level. This corresponds to the
       LOG_INFO priority for syslog on Unix/Linux syslog capability and to
       EVENTLOG_INFORMATION_TYPE for the Windows Event Log. Consult your
       system documentation for configuration of your logging capability.

       Message size is limited to 1024 bytes.

       Messages consist of the identifier MysqlClient followed by these
       values:

       •   SYSTEM_USER

           The operating system user name (login name) or -- if the user
           is unknown.

       •   MYSQL_USER

           The MySQL user name (specified with the ----uusseerr option) or -- if
           the user is unknown.

       •   CONNECTION_ID:

           The client connection identifier. This is the same as the
           CONNECTION_ID() function value within the session.

       •   DB_SERVER

           The server host or -- if the host is unknown.

       •   DB

           The default database or -- if no database has been selected.

       •   QUERY

           The text of the logged statement.

       Here is a sample of output generated on Linux by using ----ssyysslloogg.
       This output is formatted for readability; each logged message
       actually takes a single line.

           Mar  7 12:39:25 myhost MysqlClient[20824]:
             SYSTEM_USER:'oscar', MYSQL_USER:'my_oscar', CONNECTION_ID:23,
             DB_SERVER:'127.0.0.1', DB:'--', QUERY:'USE test;'
           Mar  7 12:39:28 myhost MysqlClient[20824]:
             SYSTEM_USER:'oscar', MYSQL_USER:'my_oscar', CONNECTION_ID:23,
             DB_SERVER:'127.0.0.1', DB:'test', QUERY:'SHOW TABLES;'

MMYYSSQQLL CCLLIIEENNTT SSEERRVVEERR--SSIIDDEE HHEELLPP
           mysql> hheellpp _s_e_a_r_c_h___s_t_r_i_n_g

       If you provide an argument to the help command, mmyyssqqll uses it as a
       search string to access server-side help from the contents of the
       MySQL Reference Manual. The proper operation of this command
       requires that the help tables in the mysql database be initialized
       with help topic information (see Section 5.1.13, “Server-Side Help
       Support”).

       If there is no match for the search string, the search fails:

           mysql> hheellpp mmee
           Nothing found
           Please try to run 'help contents' for a list of all accessible topics

       Use hheellpp ccoonntteennttss to see a list of the help categories:

           mysql> hheellpp ccoonntteennttss
           You asked for help about help category: "Contents"
           For more information, type 'help <item>', where <item> is one of the
           following categories:
              Account Management
              Administration
              Data Definition
              Data Manipulation
              Data Types
              Functions
              Functions and Modifiers for Use with GROUP BY
              Geographic Features
              Language Structure
              Plugins
              Storage Engines
              Stored Routines
              Table Maintenance
              Transactions
              Triggers

       If the search string matches multiple items, mmyyssqqll shows a list of
       matching topics:

           mysql> hheellpp llooggss
           Many help items for your request exist.
           To make a more specific request, please type 'help <item>',
           where <item> is one of the following topics:
              SHOW
              SHOW BINARY LOGS
              SHOW ENGINE
              SHOW LOGS

       Use a topic as the search string to see the help entry for that
       topic:

           mysql> hheellpp sshhooww bbiinnaarryy llooggss
           Name: 'SHOW BINARY LOGS'
           Description:
           Syntax:
           SHOW BINARY LOGS
           SHOW MASTER LOGS
           Lists the binary log files on the server. This statement is used as
           part of the procedure described in [purge-binary-logs], that shows how
           to determine which logs can be purged.
           mysql> SHOW BINARY LOGS;
           +---------------+-----------+
           | Log_name      | File_size |
           +---------------+-----------+
           | binlog.000015 |    724935 |
           | binlog.000016 |    733481 |
           +---------------+-----------+

       The search string can contain the wildcard characters % and _.
       These have the same meaning as for pattern-matching operations
       performed with the LIKE operator. For example, HELP rep% returns a
       list of topics that begin with rep:

           mysql> HHEELLPP rreepp%%
           Many help items for your request exist.
           To make a more specific request, please type 'help <item>',
           where <item> is one of the following
           topics:
              REPAIR TABLE
              REPEAT FUNCTION
              REPEAT LOOP
              REPLACE
              REPLACE FUNCTION

EEXXEECCUUTTIINNGG SSQQLL SSTTAATTEEMMEENNTTSS FFRROOMM AA TTEEXXTT FFIILLEE
       The mmyyssqqll client typically is used interactively, like this:

           shell> mmyyssqqll _d_b___n_a_m_e

       However, it is also possible to put your SQL statements in a file
       and then tell mmyyssqqll to read its input from that file. To do so,
       create a text file _t_e_x_t___f_i_l_e that contains the statements you wish
       to execute. Then invoke mmyyssqqll as shown here:

           shell> mmyyssqqll _d_b___n_a_m_e << _t_e_x_t___f_i_l_e

       If you place a USE _d_b___n_a_m_e statement as the first statement in the
       file, it is unnecessary to specify the database name on the command
       line:

           shell> mmyyssqqll << tteexxtt__ffiillee

       If you are already running mmyyssqqll, you can execute an SQL script
       file using the source command or \.  command:

           mysql> ssoouurrccee _f_i_l_e___n_a_m_e
           mysql> \\.. _f_i_l_e___n_a_m_e

       Sometimes you may want your script to display progress information
       to the user. For this you can insert statements like this:

           SELECT '<info_to_display>' AS ' ';

       The statement shown outputs <info_to_display>.

       You can also invoke mmyyssqqll with the ----vveerrbboossee option, which causes
       each statement to be displayed before the result that it produces.

       mmyyssqqll ignores Unicode byte order mark (BOM) characters at the
       beginning of input files. Previously, it read them and sent them to
       the server, resulting in a syntax error. Presence of a BOM does not
       cause mmyyssqqll to change its default character set. To do that, invoke
       mmyyssqqll with an option such as ----ddeeffaauulltt--cchhaarraacctteerr--sseett==uuttff88.

       For more information about batch mode, see Section 3.5, “Using
       mysql in Batch Mode”.

MMYYSSQQLL CCLLIIEENNTT TTIIPPSS
       This section describes some techniques that can help you use mmyyssqqll
       more effectively.

   IInnppuutt--LLiinnee EEddiittiinngg
       mmyyssqqll supports input-line editing, which enables you to modify the
       current input line in place or recall previous input lines. For
       example, the left-arrow and right-arrow keys move horizontally
       within the current input line, and the up-arrow and down-arrow keys
       move up and down through the set of previously entered lines.
       Backspace deletes the character before the cursor and typing new
       characters enters them at the cursor position. To enter the line,
       press Enter.

       On Windows, the editing key sequences are the same as supported for
       command editing in console windows. On Unix, the key sequences
       depend on the input library used to build mmyyssqqll (for example, the
       libedit or readline library).

       Documentation for the libedit and readline libraries is available
       online. To change the set of key sequences permitted by a given
       input library, define key bindings in the library startup file.
       This is a file in your home directory: .editrc for libedit and
       .inputrc for readline.

       For example, in libedit, Control+W deletes everything before the
       current cursor position and Control+U deletes the entire line. In
       readline, Control+W deletes the word before the cursor and
       Control+U deletes everything before the current cursor position. If
       mmyyssqqll was built using libedit, a user who prefers the readline
       behavior for these two keys can put the following lines in the
       .editrc file (creating the file if necessary):

           bind "^W" ed-delete-prev-word
           bind "^U" vi-kill-line-prev

       To see the current set of key bindings, temporarily put a line that
       says only bind at the end of .editrc.  mmyyssqqll will show the bindings
       when it starts.

   UUnniiccooddee SSuuppppoorrtt oonn WWiinnddoowwss
       Windows provides APIs based on UTF-16LE for reading from and
       writing to the console; the mmyyssqqll client for Windows is able to use
       these APIs. The Windows installer creates an item in the MySQL menu
       named MySQL command line client - Unicode. This item invokes the
       mmyyssqqll client with properties set to communicate through the console
       to the MySQL server using Unicode.

       To take advantage of this support manually, run mmyyssqqll within a
       console that uses a compatible Unicode font and set the default
       character set to a Unicode character set that is supported for
       communication with the server:

        1. Open a console window.

        2. Go to the console window properties, select the font tab, and
           choose Lucida Console or some other compatible Unicode font.
           This is necessary because console windows start by default
           using a DOS raster font that is inadequate for Unicode.

        3. Execute mmyyssqqll..eexxee with the ----ddeeffaauulltt--cchhaarraacctteerr--sseett==uuttff88 (or
           utf8mb4) option. This option is necessary because utf16le is
           one of the character sets that cannot be used as the client
           character set. See the section called “Impermissible Client
           Character Sets”.

       With those changes, mmyyssqqll will use the Windows APIs to communicate
       with the console using UTF-16LE, and communicate with the server
       using UTF-8. (The menu item mentioned previously sets the font and
       character set as just described.)

       To avoid those steps each time you run mmyyssqqll, you can create a
       shortcut that invokes mmyyssqqll..eexxee. The shortcut should set the
       console font to Lucida Console or some other compatible Unicode
       font, and pass the ----ddeeffaauulltt--cchhaarraacctteerr--sseett==uuttff88 (or utf8mb4) option
       to mmyyssqqll..eexxee.

       Alternatively, create a shortcut that only sets the console font,
       and set the character set in the [mysql] group of your my.ini file:

           [mysql]
           default-character-set=utf8

   DDiissppllaayyiinngg QQuueerryy RReessuullttss VVeerrttiiccaallllyy
       Some query results are much more readable when displayed
       vertically, instead of in the usual horizontal table format.
       Queries can be displayed vertically by terminating the query with
       \G instead of a semicolon. For example, longer text values that
       include newlines often are much easier to read with vertical
       output:

           mysql> SSEELLEECCTT ** FFRROOMM mmaaiillss WWHHEERREE LLEENNGGTTHH((ttxxtt)) << 330000 LLIIMMIITT 330000,,11\\GG
           *************************** 1. row ***************************
             msg_nro: 3068
                date: 2000-03-01 23:29:50
           time_zone: +0200
           mail_from: Monty
               reply: monty@no.spam.com
             mail_to: "Thimble Smith" <tim@no.spam.com>
                 sbj: UTF-8
                 txt: >>>>> "Thimble" == Thimble Smith writes:
           Thimble> Hi.  I think this is a good idea.  Is anyone familiar
           Thimble> with UTF-8 or Unicode? Otherwise, I'll put this on my
           Thimble> TODO list and see what happens.
           Yes, please do that.
           Regards,
           Monty
                file: inbox-jani-1
                hash: 190402944
           1 row in set (0.09 sec)

   UUssiinngg SSaaffee--UUppddaatteess MMooddee ((----ssaaffee--uuppddaatteess))
       For beginners, a useful startup option is ----ssaaffee--uuppddaatteess (or
       ----ii--aamm--aa--dduummmmyy, which has the same effect). Safe-updates mode is
       helpful for cases when you might have issued an UPDATE or DELETE
       statement but forgotten the WHERE clause indicating which rows to
       modify. Normally, such statements update or delete all rows in the
       table. With ----ssaaffee--uuppddaatteess, you can modify rows only by specifying
       the key values that identify them, or a LIMIT clause, or both. This
       helps prevent accidents. Safe-updates mode also restricts SELECT
       statements that produce (or are estimated to produce) very large
       result sets.

       The ----ssaaffee--uuppddaatteess option causes mmyyssqqll to execute the following
       statement when it connects to the MySQL server, to set the session
       values of the sql_safe_updates, sql_select_limit, and max_join_size
       system variables:

           SET sql_safe_updates=1, sql_select_limit=1000, max_join_size=1000000;

       The SET statement affects statement processing as follows:

       •   Enabling sql_safe_updates causes UPDATE and DELETE statements
           to produce an error if they do not specify a key constraint in
           the WHERE clause, or provide a LIMIT clause, or both. For
           example:

               UPDATE _t_b_l___n_a_m_e SET _n_o_t___k_e_y___c_o_l_u_m_n=_v_a_l WHERE _k_e_y___c_o_l_u_m_n=_v_a_l;
               UPDATE _t_b_l___n_a_m_e SET _n_o_t___k_e_y___c_o_l_u_m_n=_v_a_l LIMIT 1;

       •   Setting sql_select_limit to 1,000 causes the server to limit
           all SELECT result sets to 1,000 rows unless the statement
           includes a LIMIT clause.

       •   Setting max_join_size to 1,000,000 causes multiple-table SELECT
           statements to produce an error if the server estimates it must
           examine more than 1,000,000 row combinations.

       To specify result set limits different from 1,000 and 1,000,000,
       you can override the defaults by using the ----sseelleecctt__lliimmiitt and
       ----mmaaxx__jjooiinn__ssiizzee options when you invoke mmyyssqqll:

           mysql --safe-updates --select_limit=500 --max_join_size=10000

       It is possible for UPDATE and DELETE statements to produce an error
       in safe-updates mode even with a key specified in the WHERE clause,
       if the optimizer decides not to use the index on the key column:

       •   Range access on the index cannot be used if memory usage
           exceeds that permitted by the range_optimizer_max_mem_size
           system variable. The optimizer then falls back to a table scan.
           See the section called “Limiting Memory Use for Range
           Optimization”.

       •   If key comparisons require type conversion, the index may not
           be used (see Section 8.3.1, “How MySQL Uses Indexes”). Suppose
           that an indexed string column c1 is compared to a numeric value
           using WHERE c1 = 2222. For such comparisons, the string value
           is converted to a number and the operands are compared
           numerically (see Section 12.2, “Type Conversion in Expression
           Evaluation”), preventing use of the index. If safe-updates mode
           is enabled, an error occurs.

       As of MySQL 5.7.25, safe-updates mode includes these behaviors:

       •   EXPLAIN with UPDATE and DELETE statements does not produce
           safe-updates errors. This enables use of EXPLAIN plus SHOW
           WARNINGS to see why an index is not used, which can be helpful
           in cases such as when a range_optimizer_max_mem_size violation
           or type conversion occurs and the optimizer does not use an
           index even though a key column was specified in the WHERE
           clause.

       •   When a safe-updates error occurs, the error message includes
           the first diagnostic that was produced, to provide information
           about the reason for failure. For example, the message may
           indicate that the range_optimizer_max_mem_size value was
           exceeded or type conversion occurred, either of which can
           preclude use of an index.

       •   For multiple-table deletes and updates, an error is produced
           with safe updates enabled only if any target table uses a table
           scan.

   DDiissaabblliinngg mmyyssqqll AAuuttoo--RReeccoonnnneecctt
       If the mmyyssqqll client loses its connection to the server while
       sending a statement, it immediately and automatically tries to
       reconnect once to the server and send the statement again. However,
       even if mmyyssqqll succeeds in reconnecting, your first connection has
       ended and all your previous session objects and settings are lost:
       temporary tables, the autocommit mode, and user-defined and session
       variables. Also, any current transaction rolls back. This behavior
       may be dangerous for you, as in the following example where the
       server was shut down and restarted between the first and second
       statements without you knowing it:

           mysql> SSEETT @@aa==11;;
           Query OK, 0 rows affected (0.05 sec)
           mysql> IINNSSEERRTT IINNTTOO tt VVAALLUUEESS((@@aa));;
           ERROR 2006: MySQL server has gone away
           No connection. Trying to reconnect...
           Connection id:    1
           Current database: test
           Query OK, 1 row affected (1.30 sec)
           mysql> SSEELLEECCTT ** FFRROOMM tt;;
           +------+
           | a    |
           +------+
           | NULL |
           +------+
           1 row in set (0.05 sec)

       The @a user variable has been lost with the connection, and after
       the reconnection it is undefined. If it is important to have mmyyssqqll
       terminate with an error if the connection has been lost, you can
       start the mmyyssqqll client with the ----sskkiipp--rreeccoonnnneecctt option.

       For more information about auto-reconnect and its effect on state
       information when a reconnection occurs, see Section 27.8.20, “C API
       Automatic Reconnection Control”.

CCOOPPYYRRIIGGHHTT
       Copyright © 1997, 2019, Oracle and/or its affiliates. All rights
       reserved.

       This documentation is free software; you can redistribute it and/or
       modify it only under the terms of the GNU General Public License as
       published by the Free Software Foundation; version 2 of the
       License.

       This documentation is distributed in the hope that it will be
       useful, but WITHOUT ANY WARRANTY; without even the implied warranty
       of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
       General Public License for more details.

       You should have received a copy of the GNU General Public License
       along with the program; if not, write to the Free Software
       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
       02110-1301 USA or see http://www.gnu.org/licenses/.

NNOOTTEESS
        1. MySQL Shell 8.0 (part of MySQL 8.0)
           http://dev.mysql.com/doc/mysql-shell/8.0/en/

SSEEEE AALLSSOO
       For more information, please refer to the MySQL Reference Manual,
       which may already be installed locally and which is also available
       online at http://dev.mysql.com/doc/.

AAUUTTHHOORR
       Oracle Corporation (http://dev.mysql.com/).

MySQL 5.7                       04/12/2019                        MYSQL(1)
